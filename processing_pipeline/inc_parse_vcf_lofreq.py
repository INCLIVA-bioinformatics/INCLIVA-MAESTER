#!/usr/bin/python3
# -*- coding: utf-8 -*-
"""
inc_parse_vvcf_lofreq.py

Parses and modifies a VCF file generated by LoFreq.

Author: UB INCLIVA
Date: 26/02/2024
"""
import argparse
import os
import vcf  # PyVCF3

def parse_lofreq_vcf(lofreq_vcf_file, output_vcf, heterozygous_freq=0.2, homozygous_ref_freq=0.85):
    """
    Parse a LoFreq VCF file and write variant information to a VCF-formatted file.

    INPUT
    - lofreq_vcf_file (str): Path to the input VCF file
    - output_vcf (str): Path to the output VCF file
    - heterozygous_freq (float): Threshold for heterozygous genotype
    - homozygous_ref_freq (float): Threshold for homozygous variant genotype
    """
    sample_name = os.path.basename(lofreq_vcf_file).split('.')[0]  # Extract sample name from file name
    vcf_reader = vcf.Reader(filename=lofreq_vcf_file)

    # Open output VCF file for writing
    with open(output_vcf, 'w') as out:
        # Write VCF header
        out.write('##fileformat=VCFv4.2\n')
        out.write(f'##SAMPLE=<ID={sample_name}>\n')
        out.write('##INFO=<ID=DP,Number=1,Type=Integer,Description="Depth">\n')
        out.write('##INFO=<ID=AF,Number=1,Type=Float,Description="Allele Frequency">\n')
        out.write('##INFO=<ID=SB,Number=1,Type=Integer,Description="Strand Bias">\n')
        out.write('##INFO=<ID=DP4,Number=4,Type=Integer,Description="Number of high-quality ref-forward, ref-reverse, alt-forward and alt-reverse bases">\n')
        out.write('##FORMAT=<ID=AD,Number=R,Type=Integer,Description="Allelic depths for the ref and alt alleles in the order listed">\n')
        out.write('##FORMAT=<ID=AF,Number=A,Type=Float,Description="Allele fractions of alternate alleles in the tumor">\n')
        out.write('##FORMAT=<ID=DP,Number=1,Type=Integer,Description="Approximate read depth (reads with MQ=255 or with bad mates are filtered)">\n')
        out.write('##FORMAT=<ID=GT,Number=1,Type=String,Description="Genotype">\n')
        out.write('##contig=<ID=chrM,length=16569>\n')
        out.write('#CHROM\tPOS\tID\tREF\tALT\tQUAL\tFILTER\tINFO\tFORMAT\t' + sample_name + '\n')

        # Write variant records to the output file
        for record in vcf_reader:
            chrom = record.CHROM
            pos = record.POS
            ref = record.REF
            alt = str(record.ALT[0])
            dp = record.INFO.get('DP', '')
            af = record.INFO.get('AF', '')
            sb = record.INFO.get('SB', '')
            dp4 = record.INFO.get('DP4', '')

            # Determine GT flag based on AF value
            if af >= homozygous_ref_freq:
                gt_flag = '1/1'
            elif af >= heterozygous_freq:
                gt_flag = '0/1'
            else:
                gt_flag = '0/0'

            # Write variant record
            out.write(f"{chrom}\t{pos}\t.\t{ref}\t{alt}\t.\t.\tDP={dp};AF={af};SB={sb};DP4={','.join(map(str, dp4))}\tGT:DP:AF\t{gt_flag}:{dp}:{af}\n")

def main(arguments):
    lofreq_vcf_file = arguments.lofreq_vcf_file
    output_vcf = arguments.output_vcf
    heterozygous_freq = float(arguments.heterozygous_freq)
    homozygous_ref_freq = float(arguments.homozygous_ref_freq)

    parse_lofreq_vcf(lofreq_vcf_file, output_vcf, heterozygous_freq, homozygous_ref_freq)

parser = argparse.ArgumentParser()
parser.add_argument('-i', '--lofreq_vcf', action='store', type=str, dest='lofreq_vcf_file', required=True,
                    help='Path to the input VCF file generated by LoFreq')
parser.add_argument('-o', '--output_vcf', action='store', type=str, dest='output_vcf', required=True,
                    help='Path to the output modified VCF file')
parser.add_argument('-he', '--het_freq', action='store', type=str, dest='heterozygous_freq', required=True,
                    help='Allele frequency threshold for heterozygous genotype')
parser.add_argument('-ho', '--hom_freq', action='store', type=str, dest='homozygous_ref_freq', required=True,
                    help='Allele frequency threshold for homozygous variant genotype')

arguments = parser.parse_args()

if __name__ == "__main__":
    main(arguments)
